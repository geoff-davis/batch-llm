[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "batch-llm"
version = "3.0.0"
description = "Provider-agnostic framework for high-throughput LLM processing with async workers, automatic retries, rate limiting, and intelligent validation recovery."
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Geoff Davis", email = "geoff@keksi.ai"}
]
keywords = [
    "LLM",
    "asyncio",
    "batch-processing",
    "AI",
    "orchestration",
    "pydantic",
    "gemini",
    "openai",
    "anthropic",
    "langchain",
    "parallel",
    "rate-limiting",
    "retry",
    "structured-output",
    "prompt-engineering"
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: AsyncIO",
    "Operating System :: OS Independent"
]

dependencies = [
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
pydantic-ai = [
    "pydantic-ai>=0.0.1",
]
gemini = [
    "google-genai>=0.1.0",
]
all = [
    "pydantic-ai>=0.0.1",
    "google-genai>=0.1.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pydantic-ai>=0.0.1",  # Required for tests
]

[project.urls]
Homepage = "https://github.com/geoff-davis/batch-llm"
Documentation = "https://github.com/geoff-davis/batch-llm#readme"
Repository = "https://github.com/geoff-davis/batch-llm"
Issues = "https://github.com/geoff-davis/batch-llm/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/batch_llm"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.isort]
known-first-party = ["batch_llm"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselected by default, run with -m slow)",
]
addopts = "-m 'not slow'"  # Skip slow tests by default
